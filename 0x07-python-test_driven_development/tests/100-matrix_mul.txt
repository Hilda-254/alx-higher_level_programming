#!/usr/bin/python3
"""Unittest for matrix_mul([...])
"""
import unittest
matrix_mul = __import__('100-matrix_mul').matrix_mul

class MatrixMulTestCase(unittest.TestCase):
    def test_valid_matrices(self):
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2], [3, 4]]
        expected_result = [[7, 10], [15, 22]]
        self.assertEqual(matrix_mul(m_a, m_b), expected_result)

    def test_invalid_matrices(self):
        m_a = [[1, 2]]
        m_b = [[3, 4], [5, 6]]
        with self.assertRaises(ValueError):
            matrix_mul(m_a, m_b)

    def test_non_list_input(self):
        m_a = 1
        m_b = [[3, 4], [5, 6]]
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)

    def test_non_list_of_lists_input(self):
        m_a = [[1, 2], [3, 4]]
        m_b = [3, 4]
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)

    def test_empty_matrices(self):
        m_a = []
        m_b = [[]]
        with self.assertRaises(ValueError):
            matrix_mul(m_a, m_b)

    def test_non_numeric_elements(self):
        m_a = [[1, 2], [3, 'four']]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)

    def test_non_rectangle_matrices(self):
        m_a = [[1, 2], [3, 4, 5]]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)

    def test_incompatible_matrices(self):
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2, 3], [4, 5, 6]]
        with self.assertRaises(ValueError):
            matrix_mul(m_a, m_b)

if __name__ == '__main__':
    unittest.main()
