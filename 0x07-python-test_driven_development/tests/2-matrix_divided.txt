def test_matrix_divided():
    # Test case 1
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    div = 2
    expected_output = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]
    output = matrix_divided(matrix, div)
    assert output == expected_output, f"Test case 1 failed. Expected: {expected_output}, Got: {output}"

    # Test case 2
    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
    div = 5
    expected_output = [[2.0, 4.0, 6.0], [8.0, 10.0, 12.0], [14.0, 16.0, 18.0]]
    output = matrix_divided(matrix, div)
    assert output == expected_output, f"Test case 2 failed. Expected: {expected_output}, Got: {output}"

    # Test case 3 - matrix with different row sizes
    matrix = [[1, 2, 3], [4, 5], [6, 7, 8]]
    div = 2
    expected_error = "Each row of the matrix must have the same size"
    try:
        output = matrix_divided(matrix, div)
        assert False, f"Test case 3 failed. Expected error: {expected_error}, Got: {output}"
    except TypeError as e:
        assert str(e) == expected_error, f"Test case 3 failed. Expected error: {expected_error}, Got: {str(e)}"

    # Test case 4 - matrix with non-numeric values
    matrix = [[1, 2, 'a'], [4, 5, 6], [7, 8, 9]]
    div = 2
    expected_error = "matrix must be a matrix (list of lists) of integers/floats"
    try:
        output = matrix_divided(matrix, div)
        assert False, f"Test case 4 failed. Expected error: {expected_error}, Got: {output}"
    except TypeError as e:
        assert str(e) == expected_error, f"Test case 4 failed. Expected error: {expected_error}, Got: {str(e)}"

    # Test case 5 - division by zero
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    div = 0
    expected_error = "division by zero"
    try:
        output = matrix_divided(matrix, div)
        assert False, f"Test case 5 failed. Expected error: {expected_error}, Got: {output}"
    except ZeroDivisionError as e:
        assert str(e) == expected_error, f"Test case 5 failed. Expected error: {expected_error}, Got: {str(e)}"

    print("All test cases passed!")


# Run the test function
test_matrix_divided()
